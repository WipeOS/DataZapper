#!/bin/sh

# trap the ctrl+c signal
#
trap "echo" INT

# archive dmesg.txt and nwipe logs prior to launching nwipe. This is done just
# in case there are any display issues and we want to take a look at the dmesg data.
/usr/bin/archive_log.sh

# initialise
#
country_code=""
nwipe_options_string=""
lftp_command_line=""
http_post_url=""
autopoweroff=0
logfile="nwipe_log_$(date +%Y%m%d-%H%M%S).txt"

echo "[`date`] lftp log" > lftp.log
echo "[`date`] wget log" > wget.log

# read the kernel command line for the loadkeys label for setting the correct keyboard layout
#
country_code=$(kernel_cmdline_extractor loadkeys)
if [ $? == 0 ]
then
	if [ "$country_code" != "" ]
	then
		loadkeys $country_code
	fi
fi

# read the kernel command line for nwipe options
#
nwipe_options_string=$(kernel_cmdline_extractor nwipe_options)
if [ $? == 0 ]
then
	# set some flags
	nwipe_options_flag=1

	# Remove the --autopoweroff string if present from the nwipe options.
	# We do this because we don't want nwipe itself to power down the system.
	# ShredOS will handle the auto power down once the logs and dmesg output
	# have been transferred to the USB flash drive after the wipe completes.
	# One feature of nwipes autopoweroff is that it does not require the user
	# to press a key to exit. So that nwipe doesn't pause waiting for the
	# user to press a key which is nwipes default behaviour, we replace
	# --autopoweroff with --nowait.

	case "$nwipe_options_string" in
	*--autopoweroff*) autopoweroff=1 ;;
	*               ) autopoweroff=0 ;;
	esac
	
	if [ $autopoweroff == 1 ]
	then
		echo $nwipe_options_string > nwipe_options.txt
		sed -i 's/--autopoweroff/--nowait/g' nwipe_options.txt
		nwipe_options_string=`cat nwipe_options.txt`
	fi

	# In addition, check whether user has specified a /dev/loop0 or /dev/loop1
	# device and if yes, create 1Mbyte loop devices. These are used for testing.

	case "$nwipe_options_string" in
	*/dev/loop0*) createloop0=1 ;;
	*           ) createloop0=0 ;;
	esac

	if [ $createloop0 == 1 ]
	then
		truncate -s 1M loopback0.img
		losetup -fP loopback0.img
	fi

	case "$nwipe_options_string" in
	*/dev/loop0*) createloop1=1 ;;
	*           ) createloop1=0 ;;
	esac

	if [ $createloop1 == 1 ]
	then
		truncate -s 1M loopback1.img
		losetup -fP loopback1.img
	fi

else
	nwipe_options_flag=0	
fi

# run nwipe with a time stamped log file
#
while true
do
if [ $nwipe_options_flag == 0 ]
then
    /usr/bin/nwipe --logfile=$logfile
else
    /usr/bin/nwipe --logfile=$logfile $nwipe_options_string
fi

# read the kernel command line for a lftp command
# example lftp command "open 192.168.1.60; user joe joe's_password; cd data; mput nwipe_*.txt
#
lftp_command_line=$(kernel_cmdline_extractor lftp)
if [ $? == 0 ]
then
	echo "[`date`] Found lftp commands on kernel command line in grub.cfg"
	if [ ! -d "exported" ]; then
		mkdir exported
		echo "[`date`] created exported directory"
	fi
	echo "[`date`] Executing users lftp commands"
	lftp -c "$lftp_command_line" >> lftp.log
	if [ $? == 0 ]
	then
		echo "[`date`] lftp completed sucessfully"
		echo "[`date`] moving nwipe logs to ../exported"
		mv $logfile exported/
	else
		echo "[`date`] lftp command failed, See above and lftp.log for details"
	fi
fi

http_post_url=$(kernel_cmdline_extractor http_post_url)
if [ $? == 0 ]
then
	echo "[`date`] Found http_post config on kernel command line in grub.cfg"
	if [ ! -d "exported" ]; then
		mkdir exported
		echo "[`date`] created exported directory"
	fi
	echo "[`date`] Executing users http_post request"
	wget --method PUT --body-file="$logfile" "$http_post_url" -O - -nv >> wget.log
	if [ $? == 0 ]
	then
		echo "[`date`] wget completed sucessfully"
		echo "[`date`] moving nwipe logs to ../exported"
		mv $logfile exported/
	else
		echo "[`date`] wget command failed, See above and wget.log for details"
	fi
fi

/usr/bin/archive_log.sh

# If the user specified --autopoweroff as a nwipe option then shutdown now 
#
if [ $autopoweroff == 1 ]
then
	init 0
fi

printf ""
printf "Paused, press a key to restart nwipe."
read -rsn1 input
sleep 1;
printf " 4"
sleep 1
printf " 3"
sleep 1;
printf " 2"
sleep 1
printf " 1"
done

